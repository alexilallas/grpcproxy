// Code generated by mockery v2.17.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "github.com/alexilallas/grpcproxy/internal/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	mock "github.com/stretchr/testify/mock"
)

// TaskManagerServer is an autogenerated mock type for the TaskManagerServer type
type TaskManagerServer struct {
	mock.Mock
}

// CreateTask provides a mock function with given fields: _a0, _a1
func (_m *TaskManagerServer) CreateTask(_a0 context.Context, _a1 *emptypb.Empty) (*grpc.Task, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *grpc.Task
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty) *grpc.Task); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *emptypb.Empty) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTask provides a mock function with given fields: _a0, _a1
func (_m *TaskManagerServer) GetTask(_a0 context.Context, _a1 *grpc.Task) (*grpc.Task, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *grpc.Task
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.Task) *grpc.Task); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.Task) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedTaskManagerServer provides a mock function with given fields:
func (_m *TaskManagerServer) mustEmbedUnimplementedTaskManagerServer() {
	_m.Called()
}

type mockConstructorTestingTNewTaskManagerServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewTaskManagerServer creates a new instance of TaskManagerServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTaskManagerServer(t mockConstructorTestingTNewTaskManagerServer) *TaskManagerServer {
	mock := &TaskManagerServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
