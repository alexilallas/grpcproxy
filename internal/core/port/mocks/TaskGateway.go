// Code generated by mockery v2.17.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/alexilallas/grpcproxy/internal/core/entity"
	mock "github.com/stretchr/testify/mock"
)

// TaskGateway is an autogenerated mock type for the TaskGateway type
type TaskGateway struct {
	mock.Mock
}

// CreateTask provides a mock function with given fields: ctx
func (_m *TaskGateway) CreateTask(ctx context.Context) (entity.Task, error) {
	ret := _m.Called(ctx)

	var r0 entity.Task
	if rf, ok := ret.Get(0).(func(context.Context) entity.Task); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(entity.Task)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTask provides a mock function with given fields: ctx, id
func (_m *TaskGateway) GetTask(ctx context.Context, id string) (entity.Task, error) {
	ret := _m.Called(ctx, id)

	var r0 entity.Task
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.Task); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entity.Task)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTaskGateway interface {
	mock.TestingT
	Cleanup(func())
}

// NewTaskGateway creates a new instance of TaskGateway. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTaskGateway(t mockConstructorTestingTNewTaskGateway) *TaskGateway {
	mock := &TaskGateway{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
