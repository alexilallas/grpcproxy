// Code generated by mockery v2.17.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/alexilallas/grpcproxy/internal/core/entity"
	mock "github.com/stretchr/testify/mock"
)

// TaskUseCase is an autogenerated mock type for the TaskUseCase type
type TaskUseCase struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx
func (_m *TaskUseCase) Create(ctx context.Context) (entity.Task, error) {
	ret := _m.Called(ctx)

	var r0 entity.Task
	if rf, ok := ret.Get(0).(func(context.Context) entity.Task); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(entity.Task)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, id
func (_m *TaskUseCase) Get(ctx context.Context, id string) (entity.Task, error) {
	ret := _m.Called(ctx, id)

	var r0 entity.Task
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.Task); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entity.Task)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTaskUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewTaskUseCase creates a new instance of TaskUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTaskUseCase(t mockConstructorTestingTNewTaskUseCase) *TaskUseCase {
	mock := &TaskUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
